FACILITIES-APP 

1. Chiamata ad un API (axios, useEffect())
2. Visualizzazione a schermo dei risultati (useState()/map())
3. Search box (useState()/filter()/MUI)
4. Gestione loading/errors (MUI, useState())
5. Modale per la modifica dei dati. Riceve i dati di volta in volta (childToParent(), useState(), map(), MUI)
6. I campi della modale devono avere il value della facility cliccata
7. Separare le pagine: una per facilitiesList e una per facilityDetail. In facilityDetail chiamare una nuova api per la visualizzazione di altri dati. Gestire il path (react-router, useParams())
8. Conditional rendering della modale (ternary operator)
9. Migliora la visualizzazione delle date (date-fns)
10. Custom hooks per la gestione della modale (open, setOpen), e per la gestione di loding ed error


11. ampliare useApi e gestione delle api in generale. 

1. In api.js 1 funzione per ogni api che mi serve (getFacilities e getFacility) 
L'api che mi permette di creare una nuova facility sarà una post facility. 

2. Poi una f generica che fa fisicamente la chiamata, che contiene axios. 

Dal codice effettivo chiamo getFacilties che da api.js chiama l'altra funzione che chiama l'api generica. La chiamata è sempre la stessa, ciò che cambia l'url.

3. Fare in modo che useApi vada bene per qualsiasi tipo di data (rinominare facilities e setFacilities in 'data').

4. Quando ho set multipli (setFacilities(), setLoading()), posso usare lo useReduce() di React.
